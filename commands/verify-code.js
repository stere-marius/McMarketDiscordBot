const { SlashCommandBuilder } = require("@discordjs/builders");
const connectDatabase = require("../middleware/mongodbConnector.js");
const User = require("../models/user.js");
const { findConversation, getUserLicense } = require("../middleware/mcmApi.js");
const resourcesJSON = require("../resources.json");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("verify-code")
    .setDescription("Verify the code generated by starting a conversation!"),
  async execute(interaction) {
    const discordID = interaction.user.id;
    await connectDatabase();
    const userDatabase = await User.findOne({ discord_id: discordID });

    await interaction.reply({
      content: "Fetching information...",
      ephemeral: true,
    });

    if (!userDatabase) {
      await interaction.followUp({
        content:
          "There is no data associated with this discord address. Please use the command /verify-user first.",
        ephemeral: true,
      });
      return;
    }

    const mcmAccountAlreadyVerified = await User.findOne({
      mc_market_user_id: userDatabase.mc_market_user_id,
      verifiedDate: { $exists: true },
    });

    if (mcmAccountAlreadyVerified) {
      await interaction.followUp({
        content:
          "There is already a McMarket account verified for requested id",
        ephemeral: true,
      });
      return;
    }

    const { mc_market_user_id: userID, uuid } = userDatabase;
    const { error } = await findConversation(userID, uuid);

    if (error && error.status === 404) {
      await interaction.followUp({
        content: `
        Could not find a conversation with the generated code.\n
        Please start a conversation with TripleZone with the title being your generated code.\n
        If you already created an conversation, please try running this command later
        `,
        ephemeral: true,
      });
      return;
    }

    if (error) {
      await interaction.followUp({
        content: `There was an error on our side.\nTry again later.`,
        ephemeral: true,
      });
      return;
    }

    addVerifiedRank(interaction);
    await verifyUserResources(userDatabase, userID, interaction);

    userDatabase.verifiedDate = new Date();

    await userDatabase.save();
    await interaction.followUp({
      content: `You have been successfully verified!`,
      ephemeral: true,
    });
  },
};

const addVerifiedRank = (interaction) => {
  if (!process.env.VERIFIED_USER_ROLE_ID) return;

  interaction.member.roles.add(process.env.VERIFIED_USER_ROLE_ID);
};

const verifyUserResources = async (userDatatabse, userID, interaction) => {
  for (const resource of resourcesJSON.resources) {
    const { error, success } = await verifyResource(resource, userID);
    await interaction.followUp({ content: success || error, ephemeral: true });

    if (!success) continue;

    if (resource.role_id) {
      interaction.member.roles.add(resource.role_id);
    }

    userDatatabse.resources.push({
      resourceID: resource.id,
      verifiedDate: new Date(),
    });
  }
};

const verifyResource = async (resource, userID) => {
  const { response, error } = await getUserLicense(userID, resource.id);

  if (error && error.status === 404) {
    return { error: `Could not find a license for resource ${resource.name}` };
  }

  if (error) {
    console.error(error);
    return {
      error: `There has been an error while verifying the resource ${resource.name}`,
    };
  }

  const {
    data: { active: isLicenseActive },
  } = response.data;

  if (!isLicenseActive) {
    return { error: `Your license for this resource is expired.` };
  }

  return {
    success: `You have been verified for the resource ${resource.name}`,
  };
};
